package com.young.lunarcalendarreminder;

class Lunar {
	public boolean isleap;
	public int lunarDay;
	public int lunarMonth;
	public int lunarYear;
}

class Solar {
	public int solarDay;
	public int solarMonth;
	public int solarYear;
}

public class LunarSolarConverter {

	public static int[] lunar_month_days = {2011, 0x96aa, 0x15aa, 0x12ab5, 0x974,
		 0x14b6, 0xca57, 0xa56, 0x1526, 0x8e95, 0xd54, 0x15aa, 0x49b5, 0x96c, 0xd4ae,
		 0x149c, 0x1a4c, 0xbd26, 0x1aa6, 0xb54, 0x6d6a, 0x12da, 0x1695d, 0x95a, 0x149a,
		 0xda4b, 0x1a4a, 0x1aa4, 0xbb54, 0x16b4, 0xada, 0x495b, 0x936, 0xf497, 0x1496,
		 0x154a, 0xb6a5, 0xda4, 0x15b4, 0x6ab6, 0x126e, 0x1092f, 0x92e, 0xc96, 0xcd4a,
		 0x1d4a, 0xd64, 0x956c, 0x155c, 0x125c, 0x792e, 0x192c, 0xfa95, 0x1a94, 0x1b4a,
		 0xab55, 0xad4, 0x14da, 0x8a5d, 0xa5a, 0x1152b, 0x152a, 0x1694, 0xd6aa, 0x15aa,
		 0xab4, 0x94ba, 0x14b6, 0xa56, 0x7527, 0xd26, 0xee53, 0xd54, 0x15aa, 0xa9b5,
		 0x96c, 0x14ae, 0x8a4e, 0x1a4c, 0x11d26, 0x1aa4, 0x1b54, 0xcd6a, 0xada, 0x95c,
		 0x949d, 0x149a, 0x1a2a, 0x5b25, 0x1aa4, 0xfb52, 0x16b4, 0xaba, 0xa95b, 0x936,
		 0x1496, 0x9a4b, 0x154a, 0x136a5, 0xda4, 0x15ac, 0xcab6, 0x126e, 0x92e, 0x8c97,
		 0xa96, 0xd4a, 0x6da5, 0xd54, 0xf56a, 0x155a, 0xa5c, 0xb92e, 0x152c, 0x1a94,
		 0x9d4a, 0x1b2a, 0x16b55, 0xad4, 0x14da, 0xca5d, 0xa5a, 0x151a, 0xba95, 0x1654,
		 0x16aa, 0x4ad5, 0xab4, 0xf4ba, 0x14b6, 0xa56, 0xb517, 0xd16, 0xe52, 0x96aa,
		 0xd6a, 0x165b5, 0x96c, 0x14ae, 0xca2e, 0x1a2c, 0x1d16, 0xad52, 0x1b52, 0xb6a,
		 0x656d, 0x55c, 0xf45d, 0x145a, 0x1a2a, 0xda95, 0x16a4, 0x1ad2, 0x8b5a, 0xab6,
		 0x1455b, 0x8b6, 0x1456, 0xd52b, 0x152a, 0x1694, 0xb6aa, 0x15aa, 0xab6, 0x64b7,
		 0x8ae, 0xec57, 0xa56, 0xd2a, 0xcd95, 0xb54, 0x156a, 0x8a6d, 0x95c, 0x14ae,
		 0x4a56, 0x1a54, 0xdd2a, 0x1aaa, 0xb54, 0xb56a, 0x14da, 0x95c, 0x74ab, 0x149a,
		 0xfa4b, 0x1652, 0x16aa, 0xcad5, 0x5b4, 0x12ba, 0x895b, 0x936, 0x13497, 0xc96,
		 0xd52, 0xd6a9, 0xd6a, 0x56c, 0x92b6, 0x126e, 0x92e, 0x6c96, 0x1c94, 0xfd4a};

	public static int[] solar_1_1 = {2011, 0xfb837, 0xfba4a, 0xfbc3f, 0xfbe53,
		 0xfc048, 0xfc23c, 0xfc450, 0xfc645, 0xfc839, 0xfca4c, 0xfcc41, 0xfce36,
		 0xfd04a, 0xfd23d, 0xfd451, 0xfd646, 0xfd83a, 0xfda4d, 0xfdc43, 0xfde37,
		 0xfe04b, 0xfe23f, 0xfe453, 0xfe648, 0xfe83c, 0xfea4f, 0xfec44, 0xfee38,
		 0xff04c, 0xff241, 0xff436, 0xff64a, 0xff83e, 0xffa51, 0xffc46, 0xffe3a,
		 0x10004e, 0x100242, 0x100437, 0x10064b, 0x100841, 0x100a53, 0x100c48,
		 0x100e3c, 0x10104f, 0x101244, 0x101438, 0x10164c, 0x101842, 0x101a35,
		 0x101c49, 0x101e3d, 0x102051, 0x102245, 0x10243a, 0x10264e, 0x102843,
		 0x102a37, 0x102c4b, 0x102e3f, 0x103053, 0x103247, 0x10343b, 0x10364f,
		 0x103845, 0x103a38, 0x103c4c, 0x103e42, 0x104036, 0x104249, 0x10443d,
		 0x104651, 0x104846, 0x104a3a, 0x104c4e, 0x104e43, 0x105038, 0x10524a,
		 0x10543e, 0x105652, 0x105847, 0x105a3b, 0x105c4f, 0x105e45, 0x106039,
		 0x10624c, 0x106441, 0x106635, 0x106849, 0x106a3d, 0x106c51, 0x106e47,
		 0x10703c, 0x10724f, 0x107444, 0x107638, 0x10784c, 0x107a3f, 0x107c53,
		 0x107e48, 0x10803d, 0x108250, 0x108446, 0x10863a, 0x10884e, 0x108a42,
		 0x108c36, 0x108e4a, 0x10903e, 0x109251, 0x109447, 0x10963b, 0x10984f,
		 0x109a43, 0x109c37, 0x109e4b, 0x10a041, 0x10a253, 0x10a448, 0x10a63d,
		 0x10a851, 0x10aa45, 0x10ac39, 0x10ae4d, 0x10b042, 0x10b236, 0x10b44a,
		 0x10b63e, 0x10b852, 0x10ba47, 0x10bc3b, 0x10be4f, 0x10c044, 0x10c237,
		 0x10c44b, 0x10c641, 0x10c854, 0x10ca48, 0x10cc3d, 0x10ce50, 0x10d045,
		 0x10d239, 0x10d44c, 0x10d642, 0x10d837, 0x10da4a, 0x10dc3e, 0x10de52,
		 0x10e047, 0x10e23a, 0x10e44e, 0x10e643, 0x10e838, 0x10ea4b, 0x10ec41,
		 0x10ee54, 0x10f049, 0x10f23c, 0x10f450, 0x10f645, 0x10f839, 0x10fa4c,
		 0x10fc42, 0x10fe37, 0x11004b, 0x11023e, 0x110452, 0x110647, 0x11083b,
		 0x110a4e, 0x110c43, 0x110e38, 0x11104c, 0x11123f, 0x111435, 0x111648,
		 0x11183c, 0x111a4f, 0x111c45, 0x111e39, 0x11204d, 0x112242, 0x112436,
		 0x11264a, 0x11283e, 0x112a51, 0x112c46, 0x112e3b, 0x11304f, 0x113244,
		 0x113439, 0x11364d, 0x113842, 0x113a54, 0x113c49, 0x113e3d, 0x114051,
		 0x114246, 0x11443a, 0x11464e, 0x114844, 0x114a37, 0x114c4a, 0x114e3e};

	public static int GetBitInt(int data, int length, int shift) {
		return (data & (((1 << length) - 1) << shift)) >> shift;
	}

	// WARNING: Dates before Oct. 1582 are inaccurate
	public static long SolarToInt(int y, int m, int d) {
		m = (m + 9) % 12;
		y = y - m / 10;
		return 365 * y + y / 4 - y / 100 + y / 400 + (m * 306 + 5) / 10
				+ (d - 1);
	}

	public static Solar SolarFromInt(long g) {
		long y = (10000 * g + 14780) / 3652425;
		long ddd = g - (365 * y + y / 4 - y / 100 + y / 400);
		if (ddd < 0) {
			y--;
			ddd = g - (365 * y + y / 4 - y / 100 + y / 400);
		}
		long mi = (100 * ddd + 52) / 3060;
		long mm = (mi + 2) % 12 + 1;
		y = y + (mi + 2) / 12;
		long dd = ddd - (mi * 306 + 5) / 10 + 1;
		Solar solar = new Solar();
		solar.solarYear = (int) y;
		solar.solarMonth = (int) mm;
		solar.solarDay = (int) dd;
		return solar;
	}

	public static Solar LunarToSolar(Lunar lunar) {
		int days = lunar_month_days[lunar.lunarYear - lunar_month_days[0]];
		int leap = GetBitInt(days, 4, 13);
		int offset = 0;
		int loopend = leap;
		if (!lunar.isleap) {
			if (lunar.lunarMonth <= leap || leap == 0) {
				loopend = lunar.lunarMonth - 1;
			} else {
				loopend = lunar.lunarMonth;
			}
		}
		for (int i = 0; i < loopend; i++) {
			offset += GetBitInt(days, 1, 12 - i) == 1 ? 30 : 29;
		}
		offset += lunar.lunarDay;

		int solar11 = solar_1_1[lunar.lunarYear - solar_1_1[0]];

		int y = GetBitInt(solar11, 12, 9);
		int m = GetBitInt(solar11, 4, 5);
		int d = GetBitInt(solar11, 5, 0);

		return SolarFromInt(SolarToInt(y, m, d) + offset - 1);
	}

	public static Lunar SolarToLunar(Solar solar) {
		Lunar lunar = new Lunar();
		int index = solar.solarYear - solar_1_1[0];
		int data = (solar.solarYear << 9) | (solar.solarMonth << 5)
				| (solar.solarDay);
		int solar11 = 0;
		if (solar_1_1[index] > data) {
			index--;
		}
		solar11 = solar_1_1[index];
		int y = GetBitInt(solar11, 12, 9);
		int m = GetBitInt(solar11, 4, 5);
		int d = GetBitInt(solar11, 5, 0);
		long offset = SolarToInt(solar.solarYear, solar.solarMonth,
				solar.solarDay) - SolarToInt(y, m, d);

		int days = lunar_month_days[index];
		int leap = GetBitInt(days, 4, 13);

		int lunarY = index + solar_1_1[0];
		int lunarM = 1;
		int lunarD = 1;
		offset += 1;

		for (int i = 0; i < 13; i++) {
			int dm = GetBitInt(days, 1, 12 - i) == 1 ? 30 : 29;
			if (offset > dm) {
				lunarM++;
				offset -= dm;
			} else {
				break;
			}
		}
		lunarD = (int) (offset);
		lunar.lunarYear = lunarY;
		lunar.lunarMonth = lunarM;
		lunar.isleap = false;
		if (leap != 0 && lunarM > leap) {
			lunar.lunarMonth = lunarM - 1;
			if (lunarM == leap + 1) {
				lunar.isleap = true;
			}
		}

		lunar.lunarDay = lunarD;
		return lunar;
	}
}
